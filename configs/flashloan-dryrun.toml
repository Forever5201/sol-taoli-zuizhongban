# ===================================================================
# 闪电贷 干运行配置 - 模拟模式
# ===================================================================
# 
# 模式：DRY RUN（不发送真实交易）
# 功能：扫描真实套利机会，计算利润，但不执行交易
# 适合：测试策略、学习观察、验证配置
#
# ===================================================================

[bot]
name = "flashloan-arbitrage-bot-dryrun"
network = "mainnet-beta"
dry_run = true  # 🔴 干运行模式：只模拟，不发送真实交易

# ===================================================================
# RPC 配置 - 使用 Helius RPC（免费tier，支持 getRecentPrioritizationFees）
# ===================================================================
[rpc]
# Helius免费RPC - 支持优先费查询、25 RPS限制、国内访问较快
# 注册地址: https://helius.dev
helius_api_key = "d261c4a1-fffe-4263-b0ac-a667c05b5683"
urls = [
  "https://mainnet.helius-rpc.com/?api-key=d261c4a1-fffe-4263-b0ac-a667c05b5683",
  "https://api.mainnet-beta.solana.com",  # 备用（不支持优先费查询）
]
commitment = "processed"
timeout = 30000  # 30秒

# ===================================================================
# 钱包配置 - 使用您已配置的闪电贷钱包
# ===================================================================
[keypair]
path = "./keypairs/flashloan-wallet.json"
min_balance_sol = 0.001  # 干运行模式不需要太多余额

# ===================================================================
# 经济模型配置
# ===================================================================
[economics]
capital_size = "medium"

[economics.cost]
signature_count = 4  # 闪电贷需要额外签名
compute_units = 800_000  # 复杂交易需要更多计算单元
compute_unit_price = 35_000  # 从20_000提升到35_000（配合动态最低保障）
use_flash_loan = true
flash_loan_amount = 100_000_000_000  # 默认借款 100 SOL

[economics.profit]
# 利润必须覆盖所有费用
# 成本分析:
#   - 固定成本: 基础费 20K + 优先费 16K-80K = 36K-100K lamports
#   - 成功后费用: Jito Tip (10%毛利) + 滑点缓冲 (~200K) = ~395K lamports
#   - 总成本: 推荐 143K, 高峰 190K lamports
#   - 2M lamports = 14.0x 推荐成本，10.5x 高峰成本 ✅✅（净利润1.56M，成本的10.9倍）
#   - 实际盈利: 1.5个/5秒 × 1.56M × 90%成功率 = 0.00152 SOL/小时（最优）
min_profit_lamports = 2_000_000  # 0.002 SOL（第二次验证阈值）
min_roi = 200  # 200% ROI（基于费用，不是本金）
max_slippage = 0.015  # 1.5% 最大滑点
min_liquidity_usd = 100000  # 只选择大池子（$100k+流动性）

[economics.risk]
# 风险控制 - 闪电贷失败成本高，需要更保守
max_consecutive_failures = 3  # 连续失败 3 次暂停
max_hourly_loss_lamports = 1_000_000  # 每小时最多亏损 0.001 SOL
min_success_rate = 0.6  # 成功率低于 60% 暂停
cooldown_period = 600_000  # 触发熔断后冷却 10 分钟

[economics.jito]
# Jito 小费配置 - 优化后平衡策略
min_tip_lamports = 100_000  # 0.0001 SOL
max_tip_lamports = 100_000_000  # 0.1 SOL
profit_share_percentage = 10  # 从30%降至10%，节省20%毛利润
competition_multiplier = 2.0
urgency_multiplier = 1.5

# ===================================================================
# 闪电贷配置 - Jupiter Lend 协议（0% 费率！）
# ===================================================================
[flashloan]
provider = "jupiter-lend"

[flashloan.jupiter_lend]
min_borrow_amount = 10_000_000_000  # 最小借款 10 SOL
max_borrow_amount = 1_000_000_000_000  # 最大借款 1000 SOL
fee_rate = 0.0  # 0% 费率（完全免费！）

[flashloan.solend]
lending_market = "4UpD2fh7xH3VP9QQaXtsS1YY3bxzWhtfpks7FatyKvdY"
reserve_sol = "8PbodeaosQP19SjYFx855UMqWxH2HynZLdBXmsrbac36"
min_borrow_amount = 10_000_000_000  # 最小借款 10 SOL
max_borrow_amount = 1_000_000_000_000  # 最大借款 1000 SOL
fee_rate = 0.0009  # 0.09% 费率

[flashloan.dynamic_sizing]
enabled = true  # 使用改进的动态借款算法（基于利润率）
min_multiplier = 10  # 基于查询金额的最小倍数（低利润率场景）
max_multiplier = 100  # 基于查询金额的最大倍数（高利润率场景）
safety_margin = 0.8  # 安全边际：借理论最优值的80%（降低风险）

# ===================================================================
# Jupiter API 配置（保留用于未来高级功能）
# ===================================================================
[jupiter_api]
# ⚠️ 注意：当前系统使用 Legacy Quote API (https://quote-api.jup.ag/v6/quote)
# 此配置保留用于未来可能的 Ultra Order API 功能（如 Iris, Predictive Execution）
# 
# API 对比：
# - Quote API (当前使用): 免费、无需认证、P50 延迟 ~100ms、适合快速价格查询
# - Ultra Order API (备用): 需要 API Key、P50 延迟 ~300ms、支持高级路由和交易生成
#
# 从 https://portal.jup.ag/ 获取 API Key（如需切换到 Ultra API）
api_key = "3cf45ad3-12bc-4832-9307-d0b76357e005"  # 保留备用
endpoint = "https://api.jup.ag/ultra"  # 保留备用（Ultra API 端点）
# 
# 当前实际使用的 API: https://quote-api.jup.ag/v6/quote
# 如需切换回 Ultra Order API: https://api.jup.ag/ultra/v1/order

# ===================================================================
# Jupiter Server 配置
# ===================================================================
[jupiter_server]
rpc_url = "https://solana-api.projectserum.com"
port = 8080
enable_circular_arbitrage = true
max_routes = 3
only_direct_routes = false

# ===================================================================
# 机会发现器配置
# ===================================================================
[opportunity_finder]
mints_file = "mints-simple.txt"  # 初始代币列表
# 桥接代币从 bridge-tokens.json 自动加载（OpportunityFinder 读取并分配给Workers）
# 环形套利路径 = 初始代币 × 桥接代币（双向查询）

# 速率限制配置 - 方案B均衡型（4 Workers × 4 Tokens）
# ============================================================
# Worker分配策略：每个Worker负责1个特定桥接代币
#   Worker 0 → USDC (最高流动性)
#   Worker 1 → USDT (高流动性)
#   Worker 2 → mSOL (质押衍生品)
#   Worker 3 → jitoSOL (Jito生态)
#
# 速率计算：
#   4 Workers × (60÷3秒) × 2查询 = 160次/分钟 ≈ 27次/10秒
#   Ultra API限制: 50次/10秒（基础配额）
#   利用率: 27÷50 = 54% ✅ 安全范围（40-60%）
#   安全余量: 46%（容忍网络抖动和重试）
# ============================================================
worker_count = 4  # 🚀 方案B均衡型：4个Worker，每个负责1个桥接代币
query_interval_ms = 3000  # 🚀 方案B：3秒间隔，54%利用率（27次/10秒）
min_profit_lamports = 5_000_000  # 0.005 SOL（第一次过滤阈值）
slippage_bps = 50  # 0.5% 滑点

[opportunity_finder.flashloan_filter]
# 闪电贷特殊过滤 - 只找大机会
min_gross_profit_multiplier = 3  # 毛利润必须是费用的 3 倍
required_liquidity_multiplier = 2  # 流动性必须是借款的 2 倍

# ===================================================================
# 执行器配置 - 使用 Jito MEV（模拟）
# ===================================================================
[execution]
mode = "jito"  # 闪电贷必须用 Jito 确保原子性
max_concurrent_trades = 1  # 不并发执行

[jito]
block_engine_url = "https://mainnet.block-engine.jito.wtf"
# 注意：干运行模式下，Jito 连接会被初始化但不会实际发送交易
auth_keypair_path = "./keypairs/flashloan-wallet.json"
check_jito_leader = true  # 必须启用！
min_tip_lamports = 100_000
max_tip_lamports = 100_000_000
tip_strategy = "balanced"
confirmation_timeout = 45000  # 45秒（闪电贷交易更复杂）

# ===================================================================
# 监控配置 - 干运行模式禁用通知
# ===================================================================
[monitoring]
enabled = true  # ✅ 启用微信推送

# 机会发现通知（首次）
alert_on_opportunity_found = false  # 不推送首次发现
min_opportunity_profit_for_alert = 5_000_000  # 0.005 SOL
opportunity_alert_rate_limit_ms = 10000  # 10秒

# 机会验证通知（二次验证通过）
alert_on_opportunity_validated = true  # ✅ 推送二次验证通过的机会
min_validated_profit_for_alert = 2_000_000  # 0.002 SOL（与第二次验证阈值保持一致）
validated_alert_rate_limit_ms = 5000  # 5秒

# Server酱配置
[monitoring.serverchan]
send_key = "SCT299918Tjm2hNLuwKRB9DqqHaiDvj3kJ"  # 您的 SendKey
enabled = true

# ===================================================================
# 日志配置 - 详细日志
# ===================================================================
[logging]
level = "info"  # info 级别（可改为 debug 查看更多细节）
pretty_print = true
file_output = true
log_dir = "./logs"
log_file_name = "flashloan-dryrun.log"
console_output = true

[logging.flashloan]
log_borrow_details = true
log_swap_steps = true
log_repay_details = true

# ===================================================================
# 安全配置
# ===================================================================
[security]
max_daily_trades = 1000  # 干运行模式可以多一些
max_daily_loss_sol = 999  # 干运行不会真实亏损
max_single_trade_fee_sol = 999  # 干运行不限制

[security.flashloan_checks]
verify_repay_amount = true
verify_profit_after_fees = true
simulate_before_execute = true
emergency_stop_on_failed_repay = true

# ===================================================================
# 交易构建配置
# ===================================================================
[transaction_builder]
use_versioned_transaction = true
use_lut = true

[transaction_builder.lut]
preload_common_accounts = true
include_dex_accounts = true
include_lending_accounts = true

# ===================================================================
# 数据库配置（可选）
# ===================================================================
[database]
enabled = true
url = "postgresql://postgres:Yuan971035088@localhost:5432/postgres?schema=public"  # PostgreSQL连接

# ===================================================================
# 干运行模式说明
# ===================================================================
#
# 在干运行模式下，机器人会：
# ✅ 启动 Jupiter Server（本地 API）
# ✅ 扫描真实的套利机会
# ✅ 计算闪电贷金额和预期利润
# ✅ 显示详细的交易路径和费用
# ✅ 记录所有日志到文件
# ❌ 但不会发送真实交易
# ❌ 不会消耗 SOL（除了少量 RPC 查询）
#
# 你会看到的输出：
# - [DRY RUN] Would borrow 100 SOL from Solend
# - [DRY RUN] Would swap SOL -> USDC -> BTC -> SOL
# - [DRY RUN] Expected profit: 0.015 SOL
# - [DRY RUN] Would send bundle to Jito with 0.001 SOL tip
#
# ===================================================================

