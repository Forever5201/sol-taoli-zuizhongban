# ========================================
# 代理配置示例文件
# ========================================
# 
# 使用方法：
# 1. 复制此文件内容到 .env 文件
# 2. 修改代理地址为你的实际代理地址
# 3. 运行系统即可自动使用代理
#

# ========================================
# 基础代理配置（最常用）
# ========================================
# 如果你只有一个代理，只需要配置这一个即可
# 其他代理类型会自动使用此配置
HTTP_PROXY=http://127.0.0.1:7980

# ========================================
# 完整代理配置（高级用户）
# ========================================
# 如果需要为不同协议配置不同代理，取消注释并修改：

# HTTPS代理（默认使用HTTP_PROXY）
# HTTPS_PROXY=http://127.0.0.1:7980

# WebSocket代理（默认使用HTTP_PROXY）
# WS_PROXY=http://127.0.0.1:7980

# 绕过代理的地址列表（逗号分隔）
# NO_PROXY=localhost,127.0.0.1

# ========================================
# 代理类型示例
# ========================================

# HTTP代理（最常见）
# HTTP_PROXY=http://127.0.0.1:7980

# HTTPS代理
# HTTP_PROXY=https://127.0.0.1:7980

# SOCKS5代理（推荐用于WebSocket）
# HTTP_PROXY=socks5://127.0.0.1:1080

# 带认证的代理
# HTTP_PROXY=http://username:password@proxy.example.com:8080

# ========================================
# 常用代理工具的默认端口
# ========================================
# Clash: http://127.0.0.1:7890
# V2Ray: socks5://127.0.0.1:1080
# Shadowsocks: socks5://127.0.0.1:1080
# Clash for Windows: http://127.0.0.1:7890
# ========================================

# ========================================
# 测试代理配置
# ========================================
# 配置完成后，运行以下命令测试：
# node test-proxy.js
#
# 或直接运行系统，在日志中查看代理状态：
# npm run dev
# ========================================
