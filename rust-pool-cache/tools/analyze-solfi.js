// SolFi V2 池子数据结构分析（1728 bytes）
const fs = require('fs');
const path = require('path');

// 从命令行读取的 base64 数据（Pool 1）
const base64Data = "/wEAAAAAAABSMXAAAAAAAIDyahYAAAAAGqJFsS/UAN1SItD7sOm5PntMig8bxVB52+z5TspcrIwGm4hX/quBhPtof2NGGMA12sQ53BrrO1WYoPAAAAAAAcb6evO+2606PWXzaqvJdDGxu+TC0vbg5HymAgNFL11hqcqmBlzCW+R+sAowC3RCAehfASzfANM/SeRHNxYmW7XpLx0GxM2dmutG7Ek0JeHCqk0q9w3+ScN/INjL6HLjIQbd9uHXZaGT2cvhRs7reawctIXtX1s3kTqM9YV+/wCpBt324ddloZPZy+FGzut5rBy0he1fWzeROoz1hX7/AKkJBgAAAAAAANuH80Z2GyX7ic4Bb7DdMcMm76DWIsPsKa+Io2+qbcAAGIIt1EOFroJJoBAAAAAAAAAAAAAABe0LIAAAAAAOQLVAIAAAAArCP8BgAAAAA8U0wQAAAAANDtkC4AAAAAiFJqdAAAAAA8ImEjBAAAIwAAAAAAAACCAAAAAAAAABgBAAAAAAAA9AEAAAAAAACsAwAAAAAAAKQGAAAAAAAAuAsAAAAAAACAPgAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAXtCyAAAAAADkC1QCAAAAAKwj/AYAAAAAPFNMEAAAAADQ7ZAuAAAAAIhSanQAAAAAPCJhIwQAAB4AAAAAAAAAaQAAAAAAAADcAAAAAAAAAMIBAAAAAAAAhAMAAAAAAACkBgAAAAAAANgOAAAAAAAAdEAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAcAAAAAAAAACgAAAAAAAAAUAAAAAAAAADcAAAAAAAAAyAAAAAAAAADoAwAAAAAAADgEAAAAAAAACAcAAAAAAAC4CwAAAAAAAIgTAAAAAAAAQB8AAAAAAACYOgAAAAAAAFBGAAAAAAAACAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAUAAAAAAAAABwAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADeDQAAAAAAACwaAAAAAAAA+CoAAAAAAABoQgAAAAAAADB1AAAAAAAAkF8BAAAAAAAAAAAAAAAAAAcAAAAAAAAAAGXNHQAAAAAAAAAAAQAAAAgAAAAAAAAAKAAAAAAAAAAA5AtUAgAAAEAfAAAAAAAAQB8AAAAAAACghgEAAAAAAJABAAAAAAAAQgOJHcQCAABz8moWAAAAABxkAAAAAAAAQEIPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

const buffer = Buffer.from(base64Data, 'base64');

console.log('=== SolFi V2 Pool Structure Analysis ===\n');
console.log(`Total size: ${buffer.length} bytes\n`);

let offset = 0;

function readPubkey() {
  const pk = buffer.slice(offset, offset + 32);
  offset += 32;
  return pk.toString('base64').slice(0, 10) + '...';
}

function readU64() {
  const val = buffer.readBigUInt64LE(offset);
  offset += 8;
  return val;
}

function readU32() {
  const val = buffer.readUInt32LE(offset);
  offset += 4;
  return val;
}

function readU8() {
  const val = buffer.readUInt8(offset);
  offset += 1;
  return val;
}

console.log('--- U64 Header Fields ---');
for (let i = 0; i < 5; i++) {
  console.log(`[${offset}] u64[${i}]: ${readU64().toString()}`);
}

console.log(`\n--- Pubkeys (估计 15-20个) ---`);
for (let i = 0; i < 25; i++) {
  if (offset + 32 > buffer.length) break;
  const pk = readPubkey();
  console.log(`[${offset - 32}] Pubkey ${i}: ${pk}`);
}

console.log(`\n--- Remaining U64 Fields ---`);
let u64Index = 0;
while (offset + 8 <= buffer.length) {
  const val = readU64();
  
  // 高亮潜在的 reserve amounts
  if (val > 1000000n && val < 10000000000000000n) {
    console.log(`[${offset - 8}] u64[${u64Index}]: ${val.toString()} ⭐ RESERVE?`);
  } else {
    console.log(`[${offset - 8}] u64[${u64Index}]: ${val.toString()}`);
  }
  u64Index++;
  
  if (u64Index > 150) break; // Safety limit
}

console.log(`\n总计已读: ${offset} / ${buffer.length} bytes`);
console.log(`剩余: ${buffer.length - offset} bytes`);




