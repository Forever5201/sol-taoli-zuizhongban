# Jupiter Server 配置示例
# 管理本地Jupiter v6 API实例，用于高性能套利

[jupiter-server]
# ============================================
# 必需配置
# ============================================

# Solana RPC URL（必需）
# 使用高性能付费RPC以获得最佳性能
rpc_url = "https://api.mainnet-beta.solana.com"

# 也可以引用全局配置
# rpc_url = "${DEFAULT_RPC_URL}"

# ============================================
# 服务器配置
# ============================================

# API监听端口（默认8080）
port = 8080

# 绑定主机（默认127.0.0.1，仅本地访问）
# ⚠️ 生产环境不要改为0.0.0.0，会暴露到外网！
host = "127.0.0.1"

# ============================================
# Jupiter功能配置
# ============================================

# 🔥 启用环形套利（必须为true才能发现套利机会）
allow_circular_arbitrage = true

# Jupiter CLI版本（默认latest）
# 可以指定具体版本，如"v6.0.0"
jupiter_version = "latest"

# 自定义Jupiter CLI路径（可选）
# 如果手动下载了jupiter-cli，可以指定路径
# jupiter_cli_path = "/path/to/jupiter-cli"

# Worker线程数（默认4）
# 影响并发查询性能，建议设为CPU核心数
worker_threads = 4

# 缓存大小（默认1000）
# 更大的缓存可以提高查询速度
cache_size = 1000

# ============================================
# 自动化管理
# ============================================

# 自动下载jupiter-cli（默认true）
# 如果未找到二进制文件，会自动从GitHub下载
auto_download = true

# 自动重启（默认true）
# 进程崩溃时自动重启
auto_restart = true

# 最大重启次数（默认3）
# 防止无限重启循环
max_restart_attempts = 3

# 重启延迟（毫秒，默认5000）
# 重启前等待时间
restart_delay_ms = 5000

# ============================================
# 健康检查
# ============================================

# 启用健康检查（默认true）
health_check_enabled = true

# 检查间隔（毫秒，默认10000 = 10秒）
health_check_interval_ms = 10000

# 检查超时（毫秒，默认5000）
health_check_timeout_ms = 5000

# 健康检查端点（默认/health）
health_check_endpoint = "/health"

# ============================================
# 日志配置
# ============================================

# 日志级别: trace, debug, info, warn, error
log_level = "info"

# 日志文件路径（可选）
# 如果设置，日志会同时输出到文件和控制台
# log_file = "./logs/jupiter-server.log"

# ============================================
# 额外环境变量（可选）
# ============================================

[jupiter-server.env]
# 传递给jupiter-cli进程的额外环境变量

# Rust日志级别（影响jupiter-cli内部日志）
# RUST_LOG = "info"

# 自定义环境变量
# MY_CUSTOM_VAR = "value"

# ============================================
# 使用说明
# ============================================

# 1. 复制此文件到 configs/jupiter-server.toml
# 2. 修改 rpc_url 为您的RPC地址
# 3. 运行: npm run jupiter-server start
# 4. API将在 http://127.0.0.1:8080 可用

# ============================================
# 性能优化建议
# ============================================

# 1. RPC性能至关重要
#    - 使用付费高性能RPC
#    - 避免使用公共RPC（速率限制）
#    - 延迟应<50ms

# 2. Worker线程
#    - 设为CPU核心数
#    - 4-8个线程通常足够

# 3. 缓存
#    - 更大的缓存=更快的查询
#    - 但会占用更多内存

# 4. 健康检查
#    - 太频繁会增加开销
#    - 10秒间隔是个好平衡

# ============================================
# 故障排查
# ============================================

# 问题：启动失败
# 解决：检查RPC URL是否正确

# 问题：健康检查失败
# 解决：等待启动完成（约10秒）

# 问题：性能差
# 解决：增加worker_threads，使用更快的RPC

# 问题：频繁重启
# 解决：检查RPC稳定性，增加restart_delay_ms
